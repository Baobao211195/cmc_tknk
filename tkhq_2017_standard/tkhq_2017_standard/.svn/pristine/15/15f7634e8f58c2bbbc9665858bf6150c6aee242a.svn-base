package com.tkhq.cmc.controller.rest;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.ss.util.RegionUtil;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.tkhq.cmc.common.CExcel;
import com.tkhq.cmc.common.Constants;
import com.tkhq.cmc.common.JasperExport;
import com.tkhq.cmc.common.Constants.ExportType;
import com.tkhq.cmc.utils.Utils;

@RestController
@RequestMapping(value="/bcpt/CanhBaoTGXNKTTP")
public class CanhBaoTGXNKTTPRestController {
	
	@Autowired
	HttpServletRequest request;
	
	@RequestMapping(value="/doChart", method = RequestMethod.GET)
	public ResponseEntity<byte[]> doChart(String trangthai, String nhx, String tinh, String loaiKy) throws IOException{
		
		String myURL = Utils.getBaseUrl(request) + "/bcpt/SoLieuTheoChiTieuThongKe11?nhx=" + nhx
				+ "&trangthai=" + Utils.escapeNull(trangthai) + "&tinh=" + Utils.escapeNull(tinh)
				+ "&maCucHQ=" + Utils.getPrincipalLogin().getMaCuc()
				+ "&maChicucHQ=" + Utils.getPrincipalLogin().getMaChiCuc();
		String responeJson;
		BufferedReader reader = null;
	    try {
	        URL url = new URL(myURL);
	        reader = new BufferedReader(new InputStreamReader(url.openStream()));
	        StringBuffer buffer = new StringBuffer();
	        int read;
	        char[] chars = new char[1024];
	        while ((read = reader.read(chars)) != -1)
	            buffer.append(chars, 0, read); 

	        responeJson = buffer.toString();
	    }
	    finally {
	        if (reader != null)
	            reader.close();
	    }
	    
	    String reportName = "";
	    try{
		    List<Map<String, Object>> dataKy = new ArrayList<Map<String, Object>>();
		    JSONArray jsonArray = new JSONArray(responeJson);
		    JSONObject jsonObject = jsonArray.getJSONObject(0);
		    
		    JSONArray data = new JSONArray();
		    if(loaiKy.equalsIgnoreCase("ky")){
		    	data = jsonObject.getJSONObject("data_ky").getJSONArray("data");
		    	reportName = "CanhBaoTGTTP_Ky";
		    }else{
		    	data = jsonObject.getJSONObject("data_thang").getJSONArray("data");
		    	reportName = "CanhBaoTGTTP_Thang";
		    }
		    
		    if(data.length() > 0){
		    	dataKy = Utils.jsonToListMap(data);
		    }
	
			JRBeanCollectionDataSource lstDataSource = new JRBeanCollectionDataSource(dataKy);
			Map<String, Object> param = new HashMap<String, Object>();
			
			return JasperExport.ExportReport(reportName, lstDataSource, param ,ExportType.HTML);
	    }catch(Exception ex){
	    	ex.printStackTrace();
	    	return new ResponseEntity<byte[]>(HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}
	
	@RequestMapping(value = "/doExport", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    public void doExport(@RequestBody Hashtable<String, String> params, HttpServletResponse response) {
		String currentDate = Utils.getCurrentDate();
		ClassLoader loader = Thread.currentThread().getContextClassLoader();
		String excelDir = loader.getResource("ExcelTemplates/").getPath();
		String excelFilePath = excelDir + "\\DienBienTGXNKTTP.xls";
		String fileName = String.format("Diễn biến trị giá xuất nhập khẩu của 63 tỉnh, thành phố_%s.xls", currentDate);
		
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		
		try{
			String myURL = Utils.getBaseUrl(request) + "/bcpt/SoLieuTheoChiTieuThongKe11?nhx=" + params.get("nhx")
				+ "&trangthai=" + Utils.escapeNull(params.get("trangthai")) + "&tinh=" + Utils.escapeNull(params.get("tinh"))
				+ "&maCucHQ=" + Utils.getPrincipalLogin().getMaCuc()
				+ "&maChicucHQ=" + Utils.getPrincipalLogin().getMaChiCuc();
			String responeJson;
			BufferedReader reader = null;
		    try {
		        URL url = new URL(myURL);
		        reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
		        StringBuffer buffer = new StringBuffer();
		        int read;
		        char[] chars = new char[1024];
		        while ((read = reader.read(chars)) != -1)
		            buffer.append(chars, 0, read); 

		        responeJson = buffer.toString();
		    } finally {
		        if (reader != null)
		            reader.close();
		    }
		    
		    JSONArray jsonArray = new JSONArray(responeJson);
		    
		    for(int i = 0; i < jsonArray.length(); i++){
		    	JSONObject groupJson = jsonArray.getJSONObject(i);
		    	Map<String, Object> map = Utils.jsonToMap(groupJson);
		    	list.add(map);
		    }
			
		    //Tao luong doc workbook
			InputStream is = new FileInputStream(excelFilePath);
			Workbook workbook = new HSSFWorkbook(is);
			Sheet sheet = workbook.getSheetAt(0);
			Cell cell;	//store value of current cell
			Row row;	//store value of current row
			
			 Map<String, CellStyle> styles = CExcel.createStyles(workbook);
			
			Integer colNum = 0;	//position of first column fill data
			Integer rowNum = 3; //position of first row fill data
			String mergeRange = "";
			
			Map<String, Object> dataKy = new HashMap<String, Object>();
			List<Map<String, Object>> lstDataKy = new ArrayList<Map<String, Object>>();
			Map<String, Object> dataThang = new HashMap<String, Object>();
			List<Map<String, Object>> lstDataThang = new ArrayList<Map<String, Object>>();
			
			//fill data to cell
			for(int i = 0; i < list.size(); i++){
				colNum = 0;
				rowNum++;
				row = sheet.createRow(rowNum);
				cell = row.createCell(colNum);
				cell.setCellValue(list.get(i).get("sub_name").toString());
				cell.setCellStyle(styles.get("cell_str_center"));
				
				mergeRange = "$" + CellReference.convertNumToColString(0) + "$" + (rowNum + 1)  + ":$"
						+ CellReference.convertNumToColString(0) + "$" + (rowNum + 2);
				sheet.addMergedRegion(CellRangeAddress.valueOf(mergeRange));
				
				colNum++;
				cell = row.createCell(colNum);
				cell.setCellValue("Kỳ");
				cell.setCellStyle(styles.get("cell_str_center"));
				
				dataKy = (Map<String, Object>)list.get(i).get("data_ky");
				lstDataKy = (List<Map<String, Object>>)dataKy.get("data");
				
				for(int k = 0; k < lstDataKy.size(); k++){
					colNum++;
					cell = row.createCell(colNum);
					cell.setCellValue(lstDataKy.get(k).get("ky").toString() + "\n"
							+ lstDataKy.get(k).get("gia_tri").toString());
					cell.setCellStyle(styles.get("cell_str_center"));
					sheet.setColumnWidth(colNum, 10 * 256);
				}
				
				colNum++;
				cell = row.createCell(colNum);
				cell.setCellValue(Utils.escapeNull(dataKy.get("ss_ky_truoc")));
				cell.setCellStyle(styles.get("cell_str_center"));
				
				colNum++;
				cell = row.createCell(colNum);
				cell.setCellValue(Utils.escapeNull(dataKy.get("ss_ky_nam_truoc")));
				cell.setCellStyle(styles.get("cell_str_center"));
				
				rowNum++;
				colNum = 1;
				row = sheet.createRow(rowNum);
				cell = row.createCell(colNum);
				cell.setCellValue("Tháng");
				cell.setCellStyle(styles.get("cell_str_center"));
				
				dataThang = (Map<String, Object>)list.get(i).get("data_thang");
				lstDataThang = (List<Map<String, Object>>)dataThang.get("data");
				
				for(int k = 0; k < lstDataThang.size(); k++){
					colNum++;
					cell = row.createCell(colNum);
					cell.setCellValue(lstDataThang.get(k).get("thang").toString() + "\n"
							+ lstDataThang.get(k).get("gia_tri").toString());
					cell.setCellStyle(styles.get("cell_str_center"));	
					sheet.setColumnWidth(colNum, 10 * 256);
					
					if(k == (lstDataThang.size() - 1) && lstDataKy.size()%2 != 0)
						continue;
					
					mergeRange = "$" + CellReference.convertNumToColString(colNum) + "$" + (rowNum + 1)  + ":$"
							+ CellReference.convertNumToColString(colNum + 1) + "$" + (rowNum + 1);
					sheet.addMergedRegion(CellRangeAddress.valueOf(mergeRange));
					RegionUtil.setBorderBottom(CellStyle.BORDER_THIN, CellRangeAddress.valueOf(mergeRange), sheet);
					
					colNum++;
				}
				
				colNum++;
				cell = row.createCell(colNum);
				cell.setCellValue(Utils.escapeNull(dataThang.get("ss_thang_truoc")));
				cell.setCellStyle(styles.get("cell_str_center"));
				
				colNum++;
				cell = row.createCell(colNum);
				cell.setCellValue(Utils.escapeNull(dataThang.get("ss_thang_nam_truoc")));
				cell.setCellStyle(styles.get("cell_str_center"));
				
				rowNum++;
				colNum = 0;
				row = sheet.createRow(rowNum);
				cell = row.createCell(colNum);
				cell.setCellValue("AVG");
				cell.setCellStyle(styles.get("cell_str_center"));
				
				colNum++;
				cell = row.createCell(colNum);
				cell.setCellValue(list.get(i).get("avg").toString());
				cell.setCellStyle(styles.get("cell_str_center"));
				
				mergeRange = "$" + CellReference.convertNumToColString(1) + "$" + (rowNum + 1) + ":$"
						+ CellReference.convertNumToColString(lstDataKy.size() + 1) + "$" + (rowNum + 1);
				sheet.addMergedRegion(CellRangeAddress.valueOf(mergeRange));
				RegionUtil.setBorderBottom(CellStyle.BORDER_THIN, CellRangeAddress.valueOf(mergeRange), sheet);
				RegionUtil.setBorderRight(CellStyle.BORDER_THIN, CellRangeAddress.valueOf(mergeRange), sheet);
				
				mergeRange = "$" + CellReference.convertNumToColString(lstDataKy.size() + 2) + "$" + (rowNum + 1) + ":$"
						+ CellReference.convertNumToColString(lstDataKy.size() + 3) + "$" + (rowNum + 1);
				sheet.addMergedRegion(CellRangeAddress.valueOf(mergeRange));
				RegionUtil.setBorderBottom(CellStyle.BORDER_THIN, CellRangeAddress.valueOf(mergeRange), sheet);
				RegionUtil.setBorderRight(CellStyle.BORDER_THIN, CellRangeAddress.valueOf(mergeRange), sheet);
			}
			
			//create header
			colNum = 0;
			rowNum = 3;
			
			List<String> header = new ArrayList<String>();
			header.add("Chỉ tiêu");
			header.add("Kỳ");
			header.add("Thời gian");
			header.add("So sánh với kỳ trước");
			header.add("So sánh với cùng kỳ năm trước");
			
			row = sheet.createRow(rowNum);
             
            for(int i = 0; i < header.size(); i++){
            	if(i == 2){
            		cell = row.createCell(colNum);
    				cell.setCellValue(header.get(i));
    				cell.setCellStyle(styles.get("header"));
    				colNum += lstDataKy.size() - 1;
 					mergeRange = "$" + CellReference.convertNumToColString(i) + "$4" + ":$"
 							+ CellReference.convertNumToColString(colNum) + "$4";
 					sheet.addMergedRegion(CellRangeAddress.valueOf(mergeRange));
 					
 					colNum++;
 					continue;
 				}
            	
				cell = row.createCell(colNum);
				cell.setCellValue(header.get(i));
				cell.setCellStyle(styles.get("header"));
				colNum++;
			}
			
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");
			
			//Tao luong ghi
			ServletOutputStream out = response.getOutputStream();
			workbook.write(out);

			out.flush();
			
			out.close();
			workbook.close();
			is.close();	
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
}
