package com.tkhq.cmc.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationTrustResolver;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;

import com.tkhq.cmc.dto.TbdSysFunctionsDTO;
import com.tkhq.cmc.services.TbdSysFunctionsService;

@Configuration
@EnableWebSecurity

public class SecurityWebAppConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	@Qualifier("customUserDetailsService")
	UserDetailsService userDetailsService;
	
	@Autowired
	TbdSysFunctionsService tbdSysFunctionsService;

	@Autowired
	public void configureGlobalSecurity(AuthenticationManagerBuilder builder) throws Exception {
		builder.userDetailsService(userDetailsService);
		builder.authenticationProvider(autheticationProvider());
	}

	@Override
	public void configure(WebSecurity web) throws Exception {

		web.ignoring().antMatchers("/static/**");
	}
	
	@Override
	protected void configure(HttpSecurity security) throws Exception {
		
		
		configAntMatchers(security);
		security.authorizeRequests()
		.antMatchers("/login").permitAll()
		.anyRequest().authenticated()
		.and().formLogin().loginPage("/login")
		.loginProcessingUrl("/login").usernameParameter("username").passwordParameter("password")
		.defaultSuccessUrl("/danhsachNhomNSD").and().logout().logoutSuccessUrl("/login?logout")
		// .and().csrf().disable()
		.and().exceptionHandling().accessDeniedPage("/errors");
		security.csrf().disable();
		
		security.headers().frameOptions().sameOrigin().httpStrictTransportSecurity().disable();

	}

	@Bean
	public DaoAuthenticationProvider autheticationProvider() {
		DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		authenticationProvider.setUserDetailsService(userDetailsService);
		return authenticationProvider;
	}

	@Bean
	public static AuthenticationTrustResolver getAuthenticationTrustResolver() {
		AuthenticationTrustResolverImpl getAuthenticationTrustResolver = new AuthenticationTrustResolverImpl();

		return getAuthenticationTrustResolver;
	}
	
	private void configAntMatchers(HttpSecurity security) throws Exception{
		for (TbdSysFunctionsDTO item : tbdSysFunctionsService.getAll()) {
			if(item.getPath()!=null){
				security.authorizeRequests().antMatchers("/"+item.getPath()+"/**").hasRole(Integer.toString(item.getfunctionId()));
			}
		}
	}
	
//	@Override
//	@Autowired
//	public void configure(AuthenticationManagerBuilder auth){
//		
//	}

}
