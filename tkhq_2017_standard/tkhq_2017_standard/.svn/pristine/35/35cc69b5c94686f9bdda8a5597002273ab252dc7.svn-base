package com.tkhq.cmc.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import oracle.jdbc.internal.OracleTypes;

import org.hibernate.Criteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.hibernate.jdbc.ReturningWork;
import org.springframework.stereotype.Repository;

import com.tkhq.cmc.dto.QuanLyToChucDTO;
import com.tkhq.cmc.model.TbdSysUsers;
import com.tkhq.cmc.utils.Utils;

@Repository
public class Tbd_sys_userDAOImpl extends BaseDAO<String, TbdSysUsers> implements Tbd_sys_userDAO {


	public void insertNewUser(TbdSysUsers tbdSysUser) throws Exception {

		try {
			this.persist(tbdSysUser);
		} catch (Exception ex) {
			throw ex;
		}

	}
@SuppressWarnings("unchecked")
	public TbdSysUsers findUserByUsername(String username) {
		Criteria cr = this.createCriteria();
		cr.add(Restrictions.eq("userName", username));

		List<TbdSysUsers> results = cr.list();
		if (results.size() > 0)
			return  results.get(0);
		else
			return null;
	}

@SuppressWarnings("unchecked")
	public List<TbdSysUsers> getAllUser() {
		Criteria cr = this.createCriteria();
		List<TbdSysUsers> results = ((List<TbdSysUsers>) cr.addOrder(Order.desc("userId")).list());
		if (results.size() > 0)
			return results;
		else
			return null;
	}

	public void updateTbd_sysUsers(TbdSysUsers tbdSysUser) {
		try {
			this.update(tbdSysUser);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void deleteByUserId(Integer userId) {
		TbdSysUsers entity = new TbdSysUsers();
		entity.setUserId(userId);
		try {
			this.delete(entity);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}
	@SuppressWarnings("unchecked")
	public List<TbdSysUsers> searchUser(Integer active, String maHQ) {
		Criteria cr = this.getSession().createCriteria(TbdSysUsers.class);// this.createCriteria();
		if (!"".equals(active) && active < 2) {
			cr.add(Restrictions.eq("active", active));
		}
		if (!Utils.isEmpty(maHQ) && !"".equals(maHQ)) {
			cr.add(Restrictions.ilike("maHq", "%" + maHQ + "%"));
		}

		List<TbdSysUsers> results = (List<TbdSysUsers>) cr.addOrder(Order.desc("userId")).list();
		if (results.size() > 0)
			return results;
		else
			return null;
	}

	public boolean checkLogin(String username, String password) {
		TbdSysUsers user = findUserByUsername(username);
		if (password.equals(user.getPassword())) {
			return true;
		} else
			return false;
	}

	public List<String> getRole(final int userId, final int groupId) {
		return this.getSession().doReturningWork(new ReturningWork<List<String>>() {

			public List<String> execute(Connection conn) {

				List<String> bc = new ArrayList<String>();
				try {

					CallableStatement callstatement = conn
							.prepareCall("{call " + Utils.readProperties("PK_NGUOIDUNG.ts_GetRole") + "(?,?,?)}");

					callstatement.setInt(1, userId);
					callstatement.setInt(2, groupId);
					callstatement.registerOutParameter(3, OracleTypes.CURSOR);

					callstatement.execute();

					ResultSet rs = (ResultSet) callstatement.getObject(3);

					while (rs.next()) {
						bc.add(rs.getString("FUNCTION_ID"));
					}
				} catch (SQLException ex) {
					return bc;
				}
				return bc;
			}
		});
	}

	@SuppressWarnings("unchecked")
	public List<TbdSysUsers> searchByCondition(String username, String fullname, String donviHQ, Integer groupId,Integer active) {
		Criteria cri = this.getSession().createCriteria(TbdSysUsers.class);

		if (active !=null && !"".equals(active.toString())) {
			cri.add(Restrictions.eq("active", + active ));
		} 
		if (!Utils.isEmpty(username) && !"".equals(username)) {
			cri.add(Restrictions.ilike("userName", "%" + username + "%"));
		} 
		if (!Utils.isEmpty(fullname) && !"".equals(fullname)) {
			cri.add(Restrictions.ilike("fullName", "%" + fullname + "%"));
		} 
		if (!Utils.isEmpty(donviHQ.toString()) && !"".equals(donviHQ)) {
			cri.add(Restrictions.ilike("maHq", "%" + donviHQ + "%"));
		} 
		if (groupId!=null &&!"".equals(groupId.toString())) {
			cri.add(Restrictions.eq("groupId",  groupId));
		}
		
		
		List<TbdSysUsers> result = cri.addOrder(Order.desc("userId")).list();

		if (result.size() > 0) {
			return result;
		} else {
			return null;
		}

	}
	
	public List<QuanLyToChucDTO> searchUser(final int groupId,final int trangthai,final String maCuc,final String maChiCuc) {
		return this.getSession().doReturningWork(new ReturningWork<List<QuanLyToChucDTO>>() {

			public List<QuanLyToChucDTO> execute(Connection conn) {

				List<QuanLyToChucDTO> bc = new ArrayList<QuanLyToChucDTO>();
				try {

					CallableStatement callstatement = conn
							.prepareCall("{call " + Utils.readProperties("PK_NGUOIDUNG.ts_SearchUser") + "(?,?,?,?,?)}");

					callstatement.setInt(1, groupId);
					callstatement.setInt(2, trangthai);
					callstatement.setString(3, maCuc);
					callstatement.setString(4, maChiCuc);
					callstatement.registerOutParameter(5, OracleTypes.CURSOR);

					callstatement.execute();

					ResultSet rs = (ResultSet) callstatement.getObject(5);

					while (rs.next()) {
						QuanLyToChucDTO dto= new QuanLyToChucDTO(
								rs.getString("USERNAME"), 
								rs.getString("USERDESCRIPTION"), 
								rs.getString("MA_HQ"), 
								rs.getString("TEN"), 
								rs.getString("GROUP_NAME"), 
								rs.getString("ACTIVE"));
						bc.add(dto);
					}
				} catch (SQLException ex) {
					return bc;
				}
				return bc;
			}
		});
	}

//	@Override
	public int checkRoleBieu(final String username,final int ky, final int thang, final int quy,final int nam,final String trangthai,final String path) {
		return this.getSession().doReturningWork(new ReturningWork<Integer>() {

			public Integer execute(Connection conn) {

				
				try {

					CallableStatement callstatement = conn
							.prepareCall("{call " + Utils.readProperties("PK_NGUOIDUNG.ts_CheckRoleBieu") + "(?,?,?,?,?,?,?,?)}");

					callstatement.setString(1, username);
					callstatement.setInt(2, ky);
					callstatement.setInt(3, thang);
					callstatement.setInt(4, quy);
					callstatement.setInt(5, nam);
					callstatement.setString(6, trangthai);
					callstatement.setString(7, path);
					callstatement.registerOutParameter(8, OracleTypes.CURSOR);

					callstatement.execute();

					ResultSet rs = (ResultSet) callstatement.getObject(8);

					while (rs.next()) {
								return rs.getInt(1);
					}
				} catch (SQLException ex) {
					return 0;
				}
				return 0;
			}
		});
	}
	/*public List<Tbd_sys_userDTO> getAllFullName(){
		
		return this.getSession().doReturningWork(new ReturningWork<List<Tbd_sys_userDTO>>() {

			@Override
			public List<Tbd_sys_userDTO> execute(Connection connection) throws SQLException {
				List<Tbd_sys_userDTO> list = new ArrayList<Tbd_sys_userDTO>();
				try {
					CallableStatement call = connection.prepareCall("{call " + Utils.readProperties("PK_NGUOIDUNG.ts_getAllId") + "(?)}");
					
					call.registerOutParameter(1, OracleTypes.CURSOR);
					call.execute();
					ResultSet result = (ResultSet) call.getObject(1);
					while (result.next()) {
						Tbd_sys_userDTO dto = new Tbd_sys_userDTO(result.getLong("USER_ID"), result.getString("FULL_NAME"));
						list.add(dto);
					}
					return list;
				} catch (Exception e) {
					return null;
				}
				
			}
		}); 
		
	}*/
	@Override
	public int ketXuatBieu(final int ky, final int thang, final int nam,final String loai_BC, final String path) {
		return this.getSession().doReturningWork(new ReturningWork<Integer>() {

			public Integer execute(Connection conn) {

				
				try {

					CallableStatement callstatement = conn
							.prepareCall("{call " + Utils.readProperties("PK_KETXUAT_BIEU.TS_KETXUAT") + "(?,?,?,?,?)}");

					callstatement.setInt(1, ky);
					callstatement.setInt(2, thang);
					callstatement.setInt(3, nam);
					callstatement.setString(4, loai_BC);
					callstatement.setString(5, path);

					callstatement.execute();

				} catch (SQLException ex) {
					return 1;
				}
				return 0;
			}
		});
		
	}
}
