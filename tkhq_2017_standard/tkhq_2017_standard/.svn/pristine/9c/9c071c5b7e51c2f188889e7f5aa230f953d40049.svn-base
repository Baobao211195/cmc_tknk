/**
 * Service of model TBD_KetXuatTNHT
 * 
 */

'use strict';
App.factory('ketXuatTNHTService',['$http','$q', ketXuatTNHTService]);

function ketXuatTNHTService($http, $q) {

	var REST_SERVICE_URI = "http://localhost:8080/tkhq_2017_standard";
	
	var factory = {
		GetListKetXuatTNHT: GetListKetXuatTNHT,
		UpdateKetXuatTNHT : UpdateKetXuatTNHT,
		ExportKetXuatNTHT : ExportKetXuatNTHT,
	};

	return factory;

	function GetListKetXuatTNHT(tuNgay, denNgay) {
		var deferred = $q.defer();
		console.log("Lọc dữ liệu từ ngày:" + tuNgay + "đến ngày " + denNgay);
		
		console.log(REST_SERVICE_URI + "/kxTnHT?" + "tuNgay="+ tuNgay +"&denNgay=" + denNgay);
		$http.get(REST_SERVICE_URI + "/kxTnHT?" + "tuNgay="+ tuNgay +"&denNgay=" + denNgay)
			.then(
				function(response) {
					deferred.resolve(response.data)
				},
				function (errResponse) {
					console.log("Có lỗi xảy ra trong khi lấy thông tin");
					deferred.reject(errResponse);
				}
		);
		return deferred.promise;

	}

	function UpdateKetXuatTNHT(ketXuatId, loaiHangHoaKx, trangThaiPheDuyet) {
		var deferred = $q.defer();
		console.log("Cập nhật trạng thái ph duyệt: " + ketXuatId + "với " + trangThaiPheDuyet);
		$http.post(REST_SERVICE_URI + "/kxTnHT?" + "ketXuatId="+ ketXuatId +"&loaiHangHoaKx=" + loaiHangHoaKx + "&trangThaiPheDuyet="+ trangThaiPheDuyet)
			.then(
				function (response){
					deferred.resolve(response.data)	
				},
				function(errResponse){
					console.log("Có lỗi xảy ra trong khi cập nhật trạng thái phê duyệt");
					deferred.reject(errResponse);c
				}
		);
		return deferred.promise;
	}

	function ExportKetXuatNTHT(tuNgay, denNgay, typeKetXuat) {
		var deferred = $q.defer();
		console.log("Kết xuất thông tin ra file.");

		$http.get(REST_SERVICE_URI + "/kxTnHT/printKetXuatTNHT?" + "tuNgay="+ tuNgay +"&denNgay=" + denNgay + "&typeKetXuat="+ typeKetXuat)
			.then (
				function (response) {
					deferred.resolve(response.data);
				},
				function (errResponse) {
					console.log("Có lỗi xảy ra trong khi kết xuất thông tin ra file.");
					deferred.reject(errResponse);	
				}
		);
		return deferred.promise;
	}
}