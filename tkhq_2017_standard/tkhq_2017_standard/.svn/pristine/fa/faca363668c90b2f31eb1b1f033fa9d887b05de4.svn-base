package com.tkhq.cmc.controller.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.tkhq.cmc.common.Constants;
import com.tkhq.cmc.dto.TbsQtacXuatNhapDTO;
import com.tkhq.cmc.model.TbsQtacVantaiHangxuatNn;
import com.tkhq.cmc.services.TbsQtacVantaiHangxuatNnService;

@RestController
public class TbsQtacVantaiHangxuatNnRestController {
	@Autowired
	private TbsQtacVantaiHangxuatNnService tbsQtacVantaiHangxuatNnService;
	
	@RequestMapping(value="/tbsQtacVantaiHangxuatNn", method=RequestMethod.GET)
	public ResponseEntity<TbsQtacXuatNhapDTO> getAllData (){
		
		TbsQtacXuatNhapDTO dto = new TbsQtacXuatNhapDTO();
		
		List<TbsQtacVantaiHangxuatNn> listData = tbsQtacVantaiHangxuatNnService.findAll();
		long totalCount = tbsQtacVantaiHangxuatNnService.countTotal(Constants.EMPTY, Constants.EMPTY);
		dto.setContent(listData);
		dto.setTotalItems(totalCount);
		if(listData == null){
			return new ResponseEntity<TbsQtacXuatNhapDTO>(dto, HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<TbsQtacXuatNhapDTO>(dto, HttpStatus.OK);
		
	}
	
	@RequestMapping(value="/tbsQtacVantaiHangxuatNnById", method=RequestMethod.GET)
	public ResponseEntity<TbsQtacVantaiHangxuatNn> getDataById(String id){
		TbsQtacVantaiHangxuatNn dto = tbsQtacVantaiHangxuatNnService.findById(Long.parseLong(id));
		if(dto == null){
			return new ResponseEntity<TbsQtacVantaiHangxuatNn>(dto, HttpStatus.CONFLICT);
		}
		return new ResponseEntity<TbsQtacVantaiHangxuatNn>(dto, HttpStatus.OK);
	}
	
	@RequestMapping(value="/delete/tbsQtacVantaiHangxuatNn", method=RequestMethod.GET)
	public ResponseEntity<Integer> doDeleteData(String id){
		Long idDelete = Long.parseLong(id);
		TbsQtacVantaiHangxuatNn dto = tbsQtacVantaiHangxuatNnService.findById(idDelete);
		if(dto == null){
			return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
		}
		tbsQtacVantaiHangxuatNnService.delete(idDelete);
		return new  ResponseEntity<Integer>(Constants.SUCCESS, HttpStatus.OK);
	}
	
	@RequestMapping(value="/add/tbsQtacVantaiHangxuatNn", method=RequestMethod.POST)
	public ResponseEntity<Integer> doAddData(@RequestBody TbsQtacVantaiHangxuatNn tbsQtacVantaiHangxuatNn){
		try {
			tbsQtacVantaiHangxuatNnService.insert(tbsQtacVantaiHangxuatNn);
			return new  ResponseEntity<Integer>(Constants.SUCCESS, HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
		}
	}
	
	@RequestMapping(value="/update/tbsQtacVantaiHangxuatNn", method=RequestMethod.POST)
	public ResponseEntity<Integer> doUpdateData(@RequestBody TbsQtacXuatNhapDTO paramDto){
		try {
			TbsQtacVantaiHangxuatNn dto = tbsQtacVantaiHangxuatNnService.findById(paramDto.getId());
			if (dto == null){
				return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
			}
			tbsQtacVantaiHangxuatNnService.update(paramDto);
			return new  ResponseEntity<Integer>(Constants.SUCCESS, HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
		}
	}
	
	@RequestMapping(value="/search/tbsQtacVantaiHangxuatNn", method=RequestMethod.POST)
	public ResponseEntity<TbsQtacXuatNhapDTO> SearchData(@RequestBody TbsQtacXuatNhapDTO tbsQtacXuaNhapDTO){
		List<TbsQtacVantaiHangxuatNn> listData = null;
		TbsQtacXuatNhapDTO dto = null;
		try {
			int minRow = (tbsQtacXuaNhapDTO.getCurrentPage() - 1) * tbsQtacXuaNhapDTO.getPageSize();
			int maxRow = tbsQtacXuaNhapDTO.getPageSize();
			
			long totalCount = tbsQtacVantaiHangxuatNnService.countTotal(tbsQtacXuaNhapDTO.getMaphuongthucvanchuyen(), tbsQtacXuaNhapDTO.getMacuakhaunn());
			
			if (totalCount == 0) {

				dto = new TbsQtacXuatNhapDTO();
				dto.setContent(null);
				dto.setCurrentPage(Constants.CURRENT_PAGE);
				dto.setMaxPage(Constants.MAX_PAGE);
				dto.setPageSize(Constants.PAGE_SIZE_10);
				dto.setTotalItems(Constants.ZEZO);
				
				return new ResponseEntity<TbsQtacXuatNhapDTO>(dto, HttpStatus.ACCEPTED);
			}
			listData = tbsQtacVantaiHangxuatNnService.searchData(tbsQtacXuaNhapDTO.getMaphuongthucvanchuyen(),
																tbsQtacXuaNhapDTO.getMacuakhaunn(),
															    minRow, maxRow);
			int maxPage = (int) Math.ceil(totalCount / Integer.valueOf(tbsQtacXuaNhapDTO.getPageSize()));
			dto = new TbsQtacXuatNhapDTO();
			dto.setContent(listData);
	    	dto.setCurrentPage(tbsQtacXuaNhapDTO.getCurrentPage());
	    	dto.setMaxPage(maxPage);
	    	dto.setPageSize(Integer.valueOf(Constants.PAGE_SIZE_10));
	    	dto.setTotalItems(totalCount);
	    	
			return new ResponseEntity<TbsQtacXuatNhapDTO>(dto, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<TbsQtacXuatNhapDTO>(new TbsQtacXuatNhapDTO(), HttpStatus.ACCEPTED);
		}
	}
}
