package com.tkhq.cmc.controller.rest;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.tkhq.cmc.common.Constants;
import com.tkhq.cmc.dto.TbsQtacDnTrigiaNhapkhauDTO;
import com.tkhq.cmc.model.TbsQtacDnTrigiaNhapkhau;
import com.tkhq.cmc.services.TbsQtacDnTrigiaNhapkhauService;
import com.tkhq.cmc.utils.Utils;

@RestController
public class TbsQtacDnTrigiaNhapkhauRestController {
	
	@Autowired
	private TbsQtacDnTrigiaNhapkhauService tbsQtacDnTrigiaNhapkhauService;
	
	@RequestMapping(value="/tbsQtacDnTrigiaNhapkhau", method=RequestMethod.GET)
	public ResponseEntity<TbsQtacDnTrigiaNhapkhauDTO> getAllData (){
		
		TbsQtacDnTrigiaNhapkhauDTO dto = new TbsQtacDnTrigiaNhapkhauDTO();
		
		List<TbsQtacDnTrigiaNhapkhau> listData = tbsQtacDnTrigiaNhapkhauService.findAll();
		long totalCount = tbsQtacDnTrigiaNhapkhauService.countTotal(Constants.EMPTY, Constants.EMPTY);
		dto.setContent(listData);
		dto.setTotalItems(totalCount);
		if(listData == null){
			return new ResponseEntity<TbsQtacDnTrigiaNhapkhauDTO>(dto, HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<TbsQtacDnTrigiaNhapkhauDTO>(dto, HttpStatus.OK);
		
	}
	
	@RequestMapping(value="/tbsQtacDnTrigiaNhapkhauById", method=RequestMethod.GET)
	public ResponseEntity<TbsQtacDnTrigiaNhapkhau> getDataById(String id){
		TbsQtacDnTrigiaNhapkhau dto = tbsQtacDnTrigiaNhapkhauService.findById(Long.parseLong(id));
		if(dto == null){
			return new ResponseEntity<TbsQtacDnTrigiaNhapkhau>(dto, HttpStatus.CONFLICT);
		}
		return new ResponseEntity<TbsQtacDnTrigiaNhapkhau>(dto, HttpStatus.OK);
	}
	
	@RequestMapping(value="/delete/tbsQtacDnTrigiaNhapkhau", method=RequestMethod.GET)
	public ResponseEntity<Integer> doDeleteData(String id){
		Long idDelete = Long.parseLong(id);
		TbsQtacDnTrigiaNhapkhau dto = tbsQtacDnTrigiaNhapkhauService.findById(idDelete);
		if(dto == null){
			return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
		}
		tbsQtacDnTrigiaNhapkhauService.delete(idDelete);
		return new  ResponseEntity<Integer>(Constants.SUCCESS, HttpStatus.OK);
	}
	
	@RequestMapping(value="/add/tbsQtacDnTrigiaNhapkhau", method=RequestMethod.POST)
	public ResponseEntity<Integer> doAddData(@RequestBody TbsQtacDnTrigiaNhapkhau tbsqtacdntrigianhapkhau){
		try {
			tbsQtacDnTrigiaNhapkhauService.insert(tbsqtacdntrigianhapkhau);
			return new  ResponseEntity<Integer>(Constants.SUCCESS, HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
		}
	}
	
	@RequestMapping(value="/update/tbsQtacDnTrigiaNhapkhau", method=RequestMethod.POST)
	public ResponseEntity<Integer> doUpdateData(@RequestBody TbsQtacDnTrigiaNhapkhauDTO paramDto){
		try {
			TbsQtacDnTrigiaNhapkhau dto = tbsQtacDnTrigiaNhapkhauService.findById(paramDto.getId());
			if (dto == null){
				return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
			}
			tbsQtacDnTrigiaNhapkhauService.update(paramDto);
			return new  ResponseEntity<Integer>(Constants.SUCCESS, HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<Integer>(Constants.FAILED, HttpStatus.CONFLICT);
		}
	}
	
	@RequestMapping(value="/search/tbsQtacDnTrigiaNhapkhau", method=RequestMethod.POST)
	public ResponseEntity<List<TbsQtacDnTrigiaNhapkhau>> SearchData(@RequestBody TbsQtacDnTrigiaNhapkhauDTO tbsqtacdntrigianhapkhaudto){
		List<TbsQtacDnTrigiaNhapkhau> listData = null;
		try {
			int minRow = (tbsqtacdntrigianhapkhaudto.getCurrentPage() - 1) * tbsqtacdntrigianhapkhaudto.getPageSize();
			int maxRow = tbsqtacdntrigianhapkhaudto.getPageSize();
			
			long totalCount = tbsQtacDnTrigiaNhapkhauService.countTotal(tbsqtacdntrigianhapkhaudto.getMasodn(), Utils.escapeNull(tbsqtacdntrigianhapkhaudto.getTrigianhapkhau()));
			
			if (totalCount == 0) {

				listData = new ArrayList<TbsQtacDnTrigiaNhapkhau>();
				return new ResponseEntity<List<TbsQtacDnTrigiaNhapkhau>>(listData, HttpStatus.ACCEPTED);
			}
			listData = tbsQtacDnTrigiaNhapkhauService.searchData(tbsqtacdntrigianhapkhaudto.getMasodn(),
																Utils.escapeNull(tbsqtacdntrigianhapkhaudto.getTrigianhapkhau()),
															    minRow, maxRow);
			return new ResponseEntity<List<TbsQtacDnTrigiaNhapkhau>>(listData, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<List<TbsQtacDnTrigiaNhapkhau>>(listData, HttpStatus.ACCEPTED);
		}
	}
}
